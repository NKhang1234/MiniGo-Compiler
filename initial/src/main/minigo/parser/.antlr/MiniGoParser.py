# Generated from c:/Code/PPL_Asssignment/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,63,889,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
        7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
        2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,1,0,
        4,0,198,8,0,11,0,12,0,199,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,210,
        8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,218,8,2,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,3,4,230,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,7,1,7,1,7,1,7,3,7,246,8,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,3,11,266,8,11,1,12,
        1,12,1,12,1,12,1,12,3,12,273,8,12,1,12,1,12,1,13,1,13,3,13,279,8,
        13,1,14,1,14,1,14,1,14,1,14,3,14,286,8,14,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,3,16,295,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,3,17,306,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,315,
        8,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,327,
        8,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,3,21,336,8,21,1,22,1,22,
        1,22,1,22,1,22,3,22,343,8,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,360,8,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,3,27,379,8,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,387,8,
        28,10,28,12,28,390,9,28,1,29,1,29,1,29,1,29,1,29,1,29,5,29,398,8,
        29,10,29,12,29,401,9,29,1,30,1,30,1,30,1,30,1,30,1,30,5,30,409,8,
        30,10,30,12,30,412,9,30,1,31,1,31,1,31,1,31,1,31,1,31,5,31,420,8,
        31,10,31,12,31,423,9,31,1,32,1,32,1,32,1,32,1,32,1,32,5,32,431,8,
        32,10,32,12,32,434,9,32,1,33,1,33,1,33,3,33,439,8,33,1,34,1,34,1,
        34,1,34,1,34,3,34,446,8,34,1,35,1,35,1,35,3,35,451,8,35,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,5,37,463,8,37,10,37,12,37,
        466,9,37,1,38,1,38,1,38,1,38,1,38,1,38,5,38,474,8,38,10,38,12,38,
        477,9,38,1,39,1,39,1,39,1,39,1,39,1,39,5,39,485,8,39,10,39,12,39,
        488,9,39,1,40,1,40,1,40,1,40,1,40,1,40,5,40,496,8,40,10,40,12,40,
        499,9,40,1,41,1,41,1,41,1,41,1,41,1,41,5,41,507,8,41,10,41,12,41,
        510,9,41,1,42,1,42,1,42,1,42,1,42,1,42,5,42,518,8,42,10,42,12,42,
        521,9,42,1,43,1,43,1,43,3,43,526,8,43,1,44,1,44,1,44,1,44,1,44,3,
        44,533,8,44,1,45,1,45,3,45,537,8,45,1,46,1,46,1,46,1,47,1,47,1,47,
        1,47,1,48,1,48,1,48,1,48,1,48,3,48,551,8,48,1,49,1,49,3,49,555,8,
        49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,3,51,564,8,51,1,52,1,52,1,
        52,1,52,1,52,3,52,571,8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,
        54,1,54,1,55,1,55,3,55,584,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,
        56,1,57,1,57,1,57,1,57,1,57,1,57,5,57,599,8,57,10,57,12,57,602,9,
        57,1,58,1,58,1,58,1,58,1,58,1,58,5,58,610,8,58,10,58,12,58,613,9,
        58,1,59,1,59,1,59,1,59,1,59,1,59,5,59,621,8,59,10,59,12,59,624,9,
        59,1,60,1,60,1,60,1,60,1,60,1,60,5,60,632,8,60,10,60,12,60,635,9,
        60,1,61,1,61,1,61,1,61,1,61,1,61,5,61,643,8,61,10,61,12,61,646,9,
        61,1,62,1,62,1,62,3,62,651,8,62,1,63,1,63,1,63,1,63,1,63,3,63,658,
        8,63,1,64,1,64,1,64,1,64,3,64,664,8,64,1,65,1,65,1,65,1,65,1,65,
        1,65,5,65,672,8,65,10,65,12,65,675,9,65,1,66,1,66,1,66,1,66,1,66,
        1,66,5,66,683,8,66,10,66,12,66,686,9,66,1,67,1,67,1,67,1,67,1,67,
        1,67,5,67,694,8,67,10,67,12,67,697,9,67,1,68,1,68,1,68,1,68,1,68,
        1,68,5,68,705,8,68,10,68,12,68,708,9,68,1,69,1,69,1,69,1,69,1,69,
        1,69,5,69,716,8,69,10,69,12,69,719,9,69,1,70,1,70,1,70,3,70,724,
        8,70,1,71,1,71,1,71,1,71,1,71,3,71,731,8,71,1,72,1,72,1,72,1,72,
        1,72,1,72,3,72,739,8,72,1,73,1,73,1,73,3,73,744,8,73,1,74,1,74,1,
        74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,755,8,74,1,74,1,74,1,75,1,
        75,3,75,761,8,75,1,76,1,76,1,76,1,76,3,76,767,8,76,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,3,77,778,8,77,1,78,1,78,1,78,1,78,
        1,78,3,78,785,8,78,1,79,1,79,1,79,1,79,1,80,1,80,1,80,3,80,794,8,
        80,1,81,1,81,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,3,83,813,8,83,1,84,1,84,1,84,1,84,3,84,819,
        8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,
        3,86,833,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,3,89,853,8,89,1,90,1,90,
        1,90,3,90,858,8,90,1,90,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,95,1,95,
        1,96,1,96,3,96,884,8,96,1,97,1,97,1,97,1,97,0,21,56,58,60,62,64,
        74,76,78,80,82,84,114,116,118,120,122,130,132,134,136,138,98,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,0,10,2,0,10,13,53,53,1,0,53,54,2,0,52,52,59,59,2,0,19,21,
        54,56,1,0,27,32,1,0,22,23,1,0,24,26,2,0,23,23,35,35,1,0,37,42,2,
        0,1,1,53,53,885,0,197,1,0,0,0,2,209,1,0,0,0,4,217,1,0,0,0,6,219,
        1,0,0,0,8,229,1,0,0,0,10,231,1,0,0,0,12,239,1,0,0,0,14,245,1,0,0,
        0,16,247,1,0,0,0,18,251,1,0,0,0,20,259,1,0,0,0,22,265,1,0,0,0,24,
        267,1,0,0,0,26,278,1,0,0,0,28,285,1,0,0,0,30,287,1,0,0,0,32,294,
        1,0,0,0,34,296,1,0,0,0,36,309,1,0,0,0,38,318,1,0,0,0,40,320,1,0,
        0,0,42,335,1,0,0,0,44,342,1,0,0,0,46,344,1,0,0,0,48,347,1,0,0,0,
        50,349,1,0,0,0,52,366,1,0,0,0,54,378,1,0,0,0,56,380,1,0,0,0,58,391,
        1,0,0,0,60,402,1,0,0,0,62,413,1,0,0,0,64,424,1,0,0,0,66,438,1,0,
        0,0,68,445,1,0,0,0,70,450,1,0,0,0,72,452,1,0,0,0,74,456,1,0,0,0,
        76,467,1,0,0,0,78,478,1,0,0,0,80,489,1,0,0,0,82,500,1,0,0,0,84,511,
        1,0,0,0,86,525,1,0,0,0,88,532,1,0,0,0,90,536,1,0,0,0,92,538,1,0,
        0,0,94,541,1,0,0,0,96,550,1,0,0,0,98,554,1,0,0,0,100,556,1,0,0,0,
        102,563,1,0,0,0,104,570,1,0,0,0,106,572,1,0,0,0,108,576,1,0,0,0,
        110,583,1,0,0,0,112,585,1,0,0,0,114,592,1,0,0,0,116,603,1,0,0,0,
        118,614,1,0,0,0,120,625,1,0,0,0,122,636,1,0,0,0,124,650,1,0,0,0,
        126,657,1,0,0,0,128,663,1,0,0,0,130,665,1,0,0,0,132,676,1,0,0,0,
        134,687,1,0,0,0,136,698,1,0,0,0,138,709,1,0,0,0,140,723,1,0,0,0,
        142,730,1,0,0,0,144,738,1,0,0,0,146,743,1,0,0,0,148,754,1,0,0,0,
        150,760,1,0,0,0,152,766,1,0,0,0,154,768,1,0,0,0,156,779,1,0,0,0,
        158,786,1,0,0,0,160,793,1,0,0,0,162,795,1,0,0,0,164,797,1,0,0,0,
        166,799,1,0,0,0,168,818,1,0,0,0,170,820,1,0,0,0,172,832,1,0,0,0,
        174,834,1,0,0,0,176,840,1,0,0,0,178,852,1,0,0,0,180,854,1,0,0,0,
        182,862,1,0,0,0,184,864,1,0,0,0,186,866,1,0,0,0,188,877,1,0,0,0,
        190,879,1,0,0,0,192,883,1,0,0,0,194,885,1,0,0,0,196,198,3,2,1,0,
        197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,
        200,201,1,0,0,0,201,202,5,0,0,1,202,1,1,0,0,0,203,210,3,10,5,0,204,
        210,3,18,9,0,205,210,3,34,17,0,206,210,3,36,18,0,207,210,3,40,20,
        0,208,210,3,50,25,0,209,203,1,0,0,0,209,204,1,0,0,0,209,205,1,0,
        0,0,209,206,1,0,0,0,209,207,1,0,0,0,209,208,1,0,0,0,210,3,1,0,0,
        0,211,218,5,11,0,0,212,218,5,12,0,0,213,218,5,13,0,0,214,218,5,10,
        0,0,215,218,3,6,3,0,216,218,5,53,0,0,217,211,1,0,0,0,217,212,1,0,
        0,0,217,213,1,0,0,0,217,214,1,0,0,0,217,215,1,0,0,0,217,216,1,0,
        0,0,218,5,1,0,0,0,219,220,3,8,4,0,220,221,7,0,0,0,221,7,1,0,0,0,
        222,223,5,49,0,0,223,224,7,1,0,0,224,225,5,50,0,0,225,230,3,8,4,
        0,226,227,5,49,0,0,227,228,7,1,0,0,228,230,5,50,0,0,229,222,1,0,
        0,0,229,226,1,0,0,0,230,9,1,0,0,0,231,232,5,7,0,0,232,233,5,53,0,
        0,233,234,5,8,0,0,234,235,5,47,0,0,235,236,3,12,6,0,236,237,5,48,
        0,0,237,238,7,2,0,0,238,11,1,0,0,0,239,240,3,14,7,0,240,13,1,0,0,
        0,241,242,3,16,8,0,242,243,3,14,7,0,243,246,1,0,0,0,244,246,3,16,
        8,0,245,241,1,0,0,0,245,244,1,0,0,0,246,15,1,0,0,0,247,248,5,53,
        0,0,248,249,3,4,2,0,249,250,7,2,0,0,250,17,1,0,0,0,251,252,5,7,0,
        0,252,253,5,53,0,0,253,254,5,9,0,0,254,255,5,47,0,0,255,256,3,20,
        10,0,256,257,5,48,0,0,257,258,7,2,0,0,258,19,1,0,0,0,259,260,3,22,
        11,0,260,21,1,0,0,0,261,262,3,24,12,0,262,263,3,22,11,0,263,266,
        1,0,0,0,264,266,3,24,12,0,265,261,1,0,0,0,265,264,1,0,0,0,266,23,
        1,0,0,0,267,268,5,53,0,0,268,269,5,45,0,0,269,270,3,26,13,0,270,
        272,5,46,0,0,271,273,3,4,2,0,272,271,1,0,0,0,272,273,1,0,0,0,273,
        274,1,0,0,0,274,275,7,2,0,0,275,25,1,0,0,0,276,279,3,28,14,0,277,
        279,1,0,0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,27,1,0,0,0,280,281,
        3,30,15,0,281,282,5,51,0,0,282,283,3,28,14,0,283,286,1,0,0,0,284,
        286,3,30,15,0,285,280,1,0,0,0,285,284,1,0,0,0,286,29,1,0,0,0,287,
        288,3,32,16,0,288,289,3,4,2,0,289,31,1,0,0,0,290,291,5,53,0,0,291,
        292,5,51,0,0,292,295,3,32,16,0,293,295,5,53,0,0,294,290,1,0,0,0,
        294,293,1,0,0,0,295,33,1,0,0,0,296,297,5,15,0,0,297,305,5,53,0,0,
        298,299,3,4,2,0,299,300,5,36,0,0,300,301,3,130,65,0,301,306,1,0,
        0,0,302,303,5,36,0,0,303,306,3,130,65,0,304,306,3,4,2,0,305,298,
        1,0,0,0,305,302,1,0,0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,308,
        5,52,0,0,308,35,1,0,0,0,309,310,5,14,0,0,310,311,5,53,0,0,311,314,
        5,36,0,0,312,315,3,38,19,0,313,315,3,130,65,0,314,312,1,0,0,0,314,
        313,1,0,0,0,315,316,1,0,0,0,316,317,5,52,0,0,317,37,1,0,0,0,318,
        319,7,3,0,0,319,39,1,0,0,0,320,321,5,6,0,0,321,322,5,53,0,0,322,
        323,5,45,0,0,323,324,3,42,21,0,324,326,5,46,0,0,325,327,3,4,2,0,
        326,325,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,329,5,47,0,0,
        329,330,3,48,24,0,330,331,5,48,0,0,331,332,5,52,0,0,332,41,1,0,0,
        0,333,336,3,44,22,0,334,336,1,0,0,0,335,333,1,0,0,0,335,334,1,0,
        0,0,336,43,1,0,0,0,337,338,3,46,23,0,338,339,5,51,0,0,339,340,3,
        44,22,0,340,343,1,0,0,0,341,343,3,46,23,0,342,337,1,0,0,0,342,341,
        1,0,0,0,343,45,1,0,0,0,344,345,5,53,0,0,345,346,3,4,2,0,346,47,1,
        0,0,0,347,348,3,150,75,0,348,49,1,0,0,0,349,350,5,6,0,0,350,351,
        5,45,0,0,351,352,5,53,0,0,352,353,5,53,0,0,353,354,5,46,0,0,354,
        355,5,53,0,0,355,356,5,45,0,0,356,357,3,42,21,0,357,359,5,46,0,0,
        358,360,3,4,2,0,359,358,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,
        361,362,5,47,0,0,362,363,3,48,24,0,363,364,5,48,0,0,364,365,5,52,
        0,0,365,51,1,0,0,0,366,367,3,56,28,0,367,368,3,54,27,0,368,53,1,
        0,0,0,369,370,5,49,0,0,370,371,3,130,65,0,371,372,5,50,0,0,372,373,
        3,54,27,0,373,379,1,0,0,0,374,375,5,49,0,0,375,376,3,130,65,0,376,
        377,5,50,0,0,377,379,1,0,0,0,378,369,1,0,0,0,378,374,1,0,0,0,379,
        55,1,0,0,0,380,381,6,28,-1,0,381,382,3,58,29,0,382,388,1,0,0,0,383,
        384,10,2,0,0,384,385,5,34,0,0,385,387,3,58,29,0,386,383,1,0,0,0,
        387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,57,1,0,0,0,390,
        388,1,0,0,0,391,392,6,29,-1,0,392,393,3,60,30,0,393,399,1,0,0,0,
        394,395,10,2,0,0,395,396,5,33,0,0,396,398,3,60,30,0,397,394,1,0,
        0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,59,1,0,0,
        0,401,399,1,0,0,0,402,403,6,30,-1,0,403,404,3,62,31,0,404,410,1,
        0,0,0,405,406,10,2,0,0,406,407,7,4,0,0,407,409,3,62,31,0,408,405,
        1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,61,1,
        0,0,0,412,410,1,0,0,0,413,414,6,31,-1,0,414,415,3,64,32,0,415,421,
        1,0,0,0,416,417,10,2,0,0,417,418,7,5,0,0,418,420,3,64,32,0,419,416,
        1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,63,1,
        0,0,0,423,421,1,0,0,0,424,425,6,32,-1,0,425,426,3,66,33,0,426,432,
        1,0,0,0,427,428,10,2,0,0,428,429,7,6,0,0,429,431,3,66,33,0,430,427,
        1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,65,1,
        0,0,0,434,432,1,0,0,0,435,436,7,7,0,0,436,439,3,66,33,0,437,439,
        3,68,34,0,438,435,1,0,0,0,438,437,1,0,0,0,439,67,1,0,0,0,440,441,
        5,45,0,0,441,442,3,56,28,0,442,443,5,46,0,0,443,446,1,0,0,0,444,
        446,3,70,35,0,445,440,1,0,0,0,445,444,1,0,0,0,446,69,1,0,0,0,447,
        451,5,53,0,0,448,451,3,146,73,0,449,451,3,108,54,0,450,447,1,0,0,
        0,450,448,1,0,0,0,450,449,1,0,0,0,451,71,1,0,0,0,452,453,3,74,37,
        0,453,454,5,43,0,0,454,455,5,53,0,0,455,73,1,0,0,0,456,457,6,37,
        -1,0,457,458,3,76,38,0,458,464,1,0,0,0,459,460,10,2,0,0,460,461,
        5,43,0,0,461,463,3,76,38,0,462,459,1,0,0,0,463,466,1,0,0,0,464,462,
        1,0,0,0,464,465,1,0,0,0,465,75,1,0,0,0,466,464,1,0,0,0,467,468,6,
        38,-1,0,468,469,3,78,39,0,469,475,1,0,0,0,470,471,10,2,0,0,471,472,
        5,34,0,0,472,474,3,78,39,0,473,470,1,0,0,0,474,477,1,0,0,0,475,473,
        1,0,0,0,475,476,1,0,0,0,476,77,1,0,0,0,477,475,1,0,0,0,478,479,6,
        39,-1,0,479,480,3,80,40,0,480,486,1,0,0,0,481,482,10,2,0,0,482,483,
        5,33,0,0,483,485,3,80,40,0,484,481,1,0,0,0,485,488,1,0,0,0,486,484,
        1,0,0,0,486,487,1,0,0,0,487,79,1,0,0,0,488,486,1,0,0,0,489,490,6,
        40,-1,0,490,491,3,82,41,0,491,497,1,0,0,0,492,493,10,2,0,0,493,494,
        7,4,0,0,494,496,3,82,41,0,495,492,1,0,0,0,496,499,1,0,0,0,497,495,
        1,0,0,0,497,498,1,0,0,0,498,81,1,0,0,0,499,497,1,0,0,0,500,501,6,
        41,-1,0,501,502,3,84,42,0,502,508,1,0,0,0,503,504,10,2,0,0,504,505,
        7,5,0,0,505,507,3,84,42,0,506,503,1,0,0,0,507,510,1,0,0,0,508,506,
        1,0,0,0,508,509,1,0,0,0,509,83,1,0,0,0,510,508,1,0,0,0,511,512,6,
        42,-1,0,512,513,3,86,43,0,513,519,1,0,0,0,514,515,10,2,0,0,515,516,
        7,6,0,0,516,518,3,86,43,0,517,514,1,0,0,0,518,521,1,0,0,0,519,517,
        1,0,0,0,519,520,1,0,0,0,520,85,1,0,0,0,521,519,1,0,0,0,522,523,7,
        7,0,0,523,526,3,86,43,0,524,526,3,88,44,0,525,522,1,0,0,0,525,524,
        1,0,0,0,526,87,1,0,0,0,527,528,5,45,0,0,528,529,3,76,38,0,529,530,
        5,46,0,0,530,533,1,0,0,0,531,533,3,90,45,0,532,527,1,0,0,0,532,531,
        1,0,0,0,533,89,1,0,0,0,534,537,5,53,0,0,535,537,3,52,26,0,536,534,
        1,0,0,0,536,535,1,0,0,0,537,91,1,0,0,0,538,539,3,6,3,0,539,540,3,
        94,47,0,540,93,1,0,0,0,541,542,5,47,0,0,542,543,3,96,48,0,543,544,
        5,48,0,0,544,95,1,0,0,0,545,546,3,98,49,0,546,547,5,51,0,0,547,548,
        3,96,48,0,548,551,1,0,0,0,549,551,3,98,49,0,550,545,1,0,0,0,550,
        549,1,0,0,0,551,97,1,0,0,0,552,555,3,130,65,0,553,555,3,94,47,0,
        554,552,1,0,0,0,554,553,1,0,0,0,555,99,1,0,0,0,556,557,5,53,0,0,
        557,558,5,47,0,0,558,559,3,102,51,0,559,560,5,48,0,0,560,101,1,0,
        0,0,561,564,3,104,52,0,562,564,1,0,0,0,563,561,1,0,0,0,563,562,1,
        0,0,0,564,103,1,0,0,0,565,566,3,106,53,0,566,567,5,51,0,0,567,568,
        3,104,52,0,568,571,1,0,0,0,569,571,3,106,53,0,570,565,1,0,0,0,570,
        569,1,0,0,0,571,105,1,0,0,0,572,573,5,53,0,0,573,574,5,44,0,0,574,
        575,3,130,65,0,575,107,1,0,0,0,576,577,5,53,0,0,577,578,5,45,0,0,
        578,579,3,110,55,0,579,580,5,46,0,0,580,109,1,0,0,0,581,584,3,96,
        48,0,582,584,1,0,0,0,583,581,1,0,0,0,583,582,1,0,0,0,584,111,1,0,
        0,0,585,586,3,114,57,0,586,587,5,43,0,0,587,588,5,53,0,0,588,589,
        5,45,0,0,589,590,3,110,55,0,590,591,5,46,0,0,591,113,1,0,0,0,592,
        593,6,57,-1,0,593,594,3,116,58,0,594,600,1,0,0,0,595,596,10,2,0,
        0,596,597,5,34,0,0,597,599,3,116,58,0,598,595,1,0,0,0,599,602,1,
        0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,115,1,0,0,0,602,600,1,
        0,0,0,603,604,6,58,-1,0,604,605,3,118,59,0,605,611,1,0,0,0,606,607,
        10,2,0,0,607,608,5,33,0,0,608,610,3,118,59,0,609,606,1,0,0,0,610,
        613,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,0,612,117,1,0,0,0,613,
        611,1,0,0,0,614,615,6,59,-1,0,615,616,3,120,60,0,616,622,1,0,0,0,
        617,618,10,2,0,0,618,619,7,4,0,0,619,621,3,120,60,0,620,617,1,0,
        0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,623,119,1,0,
        0,0,624,622,1,0,0,0,625,626,6,60,-1,0,626,627,3,122,61,0,627,633,
        1,0,0,0,628,629,10,2,0,0,629,630,7,5,0,0,630,632,3,122,61,0,631,
        628,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,
        121,1,0,0,0,635,633,1,0,0,0,636,637,6,61,-1,0,637,638,3,124,62,0,
        638,644,1,0,0,0,639,640,10,2,0,0,640,641,7,6,0,0,641,643,3,124,62,
        0,642,639,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,
        0,645,123,1,0,0,0,646,644,1,0,0,0,647,648,7,7,0,0,648,651,3,124,
        62,0,649,651,3,126,63,0,650,647,1,0,0,0,650,649,1,0,0,0,651,125,
        1,0,0,0,652,653,5,45,0,0,653,654,3,114,57,0,654,655,5,46,0,0,655,
        658,1,0,0,0,656,658,3,128,64,0,657,652,1,0,0,0,657,656,1,0,0,0,658,
        127,1,0,0,0,659,664,5,53,0,0,660,664,3,146,73,0,661,664,3,52,26,
        0,662,664,3,72,36,0,663,659,1,0,0,0,663,660,1,0,0,0,663,661,1,0,
        0,0,663,662,1,0,0,0,664,129,1,0,0,0,665,666,6,65,-1,0,666,667,3,
        132,66,0,667,673,1,0,0,0,668,669,10,2,0,0,669,670,5,34,0,0,670,672,
        3,132,66,0,671,668,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,674,
        1,0,0,0,674,131,1,0,0,0,675,673,1,0,0,0,676,677,6,66,-1,0,677,678,
        3,134,67,0,678,684,1,0,0,0,679,680,10,2,0,0,680,681,5,33,0,0,681,
        683,3,134,67,0,682,679,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,684,
        685,1,0,0,0,685,133,1,0,0,0,686,684,1,0,0,0,687,688,6,67,-1,0,688,
        689,3,136,68,0,689,695,1,0,0,0,690,691,10,2,0,0,691,692,7,4,0,0,
        692,694,3,136,68,0,693,690,1,0,0,0,694,697,1,0,0,0,695,693,1,0,0,
        0,695,696,1,0,0,0,696,135,1,0,0,0,697,695,1,0,0,0,698,699,6,68,-1,
        0,699,700,3,138,69,0,700,706,1,0,0,0,701,702,10,2,0,0,702,703,7,
        5,0,0,703,705,3,138,69,0,704,701,1,0,0,0,705,708,1,0,0,0,706,704,
        1,0,0,0,706,707,1,0,0,0,707,137,1,0,0,0,708,706,1,0,0,0,709,710,
        6,69,-1,0,710,711,3,140,70,0,711,717,1,0,0,0,712,713,10,2,0,0,713,
        714,7,6,0,0,714,716,3,140,70,0,715,712,1,0,0,0,716,719,1,0,0,0,717,
        715,1,0,0,0,717,718,1,0,0,0,718,139,1,0,0,0,719,717,1,0,0,0,720,
        721,7,7,0,0,721,724,3,140,70,0,722,724,3,142,71,0,723,720,1,0,0,
        0,723,722,1,0,0,0,724,141,1,0,0,0,725,726,5,45,0,0,726,727,3,130,
        65,0,727,728,5,46,0,0,728,731,1,0,0,0,729,731,3,144,72,0,730,725,
        1,0,0,0,730,729,1,0,0,0,731,143,1,0,0,0,732,739,5,53,0,0,733,739,
        3,146,73,0,734,739,3,108,54,0,735,739,3,112,56,0,736,739,3,52,26,
        0,737,739,3,72,36,0,738,732,1,0,0,0,738,733,1,0,0,0,738,734,1,0,
        0,0,738,735,1,0,0,0,738,736,1,0,0,0,738,737,1,0,0,0,739,145,1,0,
        0,0,740,744,3,38,19,0,741,744,3,92,46,0,742,744,3,100,50,0,743,740,
        1,0,0,0,743,741,1,0,0,0,743,742,1,0,0,0,744,147,1,0,0,0,745,755,
        3,154,77,0,746,755,3,156,78,0,747,755,3,158,79,0,748,755,3,166,83,
        0,749,755,3,172,86,0,750,755,3,188,94,0,751,755,3,190,95,0,752,755,
        3,192,96,0,753,755,3,194,97,0,754,745,1,0,0,0,754,746,1,0,0,0,754,
        747,1,0,0,0,754,748,1,0,0,0,754,749,1,0,0,0,754,750,1,0,0,0,754,
        751,1,0,0,0,754,752,1,0,0,0,754,753,1,0,0,0,755,756,1,0,0,0,756,
        757,7,2,0,0,757,149,1,0,0,0,758,761,3,152,76,0,759,761,1,0,0,0,760,
        758,1,0,0,0,760,759,1,0,0,0,761,151,1,0,0,0,762,763,3,148,74,0,763,
        764,3,152,76,0,764,767,1,0,0,0,765,767,3,148,74,0,766,762,1,0,0,
        0,766,765,1,0,0,0,767,153,1,0,0,0,768,769,5,15,0,0,769,777,5,53,
        0,0,770,771,3,4,2,0,771,772,5,36,0,0,772,773,3,130,65,0,773,778,
        1,0,0,0,774,775,5,36,0,0,775,778,3,130,65,0,776,778,3,4,2,0,777,
        770,1,0,0,0,777,774,1,0,0,0,777,776,1,0,0,0,778,155,1,0,0,0,779,
        780,5,14,0,0,780,781,5,53,0,0,781,784,5,36,0,0,782,785,3,38,19,0,
        783,785,3,130,65,0,784,782,1,0,0,0,784,783,1,0,0,0,785,157,1,0,0,
        0,786,787,3,160,80,0,787,788,3,162,81,0,788,789,3,164,82,0,789,159,
        1,0,0,0,790,794,5,53,0,0,791,794,3,52,26,0,792,794,3,72,36,0,793,
        790,1,0,0,0,793,791,1,0,0,0,793,792,1,0,0,0,794,161,1,0,0,0,795,
        796,7,8,0,0,796,163,1,0,0,0,797,798,3,130,65,0,798,165,1,0,0,0,799,
        800,5,2,0,0,800,801,5,45,0,0,801,802,3,130,65,0,802,803,5,46,0,0,
        803,804,5,47,0,0,804,805,3,150,75,0,805,806,5,48,0,0,806,812,3,168,
        84,0,807,808,5,3,0,0,808,809,5,47,0,0,809,810,3,150,75,0,810,811,
        5,48,0,0,811,813,1,0,0,0,812,807,1,0,0,0,812,813,1,0,0,0,813,167,
        1,0,0,0,814,815,3,170,85,0,815,816,3,168,84,0,816,819,1,0,0,0,817,
        819,1,0,0,0,818,814,1,0,0,0,818,817,1,0,0,0,819,169,1,0,0,0,820,
        821,5,3,0,0,821,822,5,2,0,0,822,823,5,45,0,0,823,824,3,130,65,0,
        824,825,5,46,0,0,825,826,5,47,0,0,826,827,3,150,75,0,827,828,5,48,
        0,0,828,171,1,0,0,0,829,833,3,174,87,0,830,833,3,176,88,0,831,833,
        3,186,93,0,832,829,1,0,0,0,832,830,1,0,0,0,832,831,1,0,0,0,833,173,
        1,0,0,0,834,835,5,4,0,0,835,836,3,130,65,0,836,837,5,47,0,0,837,
        838,3,150,75,0,838,839,5,48,0,0,839,175,1,0,0,0,840,841,5,4,0,0,
        841,842,3,178,89,0,842,843,5,52,0,0,843,844,3,182,91,0,844,845,5,
        52,0,0,845,846,3,184,92,0,846,847,5,47,0,0,847,848,3,150,75,0,848,
        849,5,48,0,0,849,177,1,0,0,0,850,853,3,158,79,0,851,853,3,180,90,
        0,852,850,1,0,0,0,852,851,1,0,0,0,853,179,1,0,0,0,854,855,5,15,0,
        0,855,857,5,53,0,0,856,858,3,4,2,0,857,856,1,0,0,0,857,858,1,0,0,
        0,858,859,1,0,0,0,859,860,5,36,0,0,860,861,3,130,65,0,861,181,1,
        0,0,0,862,863,3,130,65,0,863,183,1,0,0,0,864,865,3,158,79,0,865,
        185,1,0,0,0,866,867,5,4,0,0,867,868,7,9,0,0,868,869,5,51,0,0,869,
        870,5,53,0,0,870,871,5,37,0,0,871,872,5,18,0,0,872,873,5,53,0,0,
        873,874,5,47,0,0,874,875,3,150,75,0,875,876,5,48,0,0,876,187,1,0,
        0,0,877,878,5,17,0,0,878,189,1,0,0,0,879,880,5,16,0,0,880,191,1,
        0,0,0,881,884,3,108,54,0,882,884,3,112,56,0,883,881,1,0,0,0,883,
        882,1,0,0,0,884,193,1,0,0,0,885,886,5,5,0,0,886,887,3,130,65,0,887,
        195,1,0,0,0,68,199,209,217,229,245,265,272,278,285,294,305,314,326,
        335,342,359,378,388,399,410,421,432,438,445,450,464,475,486,497,
        508,519,525,532,536,550,554,563,570,583,600,611,622,633,644,650,
        657,663,673,684,695,706,717,723,730,738,743,754,760,766,777,784,
        793,812,818,832,852,857,883
    ]

class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'_'", "'if'", "'else'", "'for'", "'return'", 
                     "'func'", "'type'", "'struct'", "'interface'", "'string'", 
                     "'int'", "'float'", "'boolean'", "'const'", "'var'", 
                     "'continue'", "'break'", "'range'", "'nil'", "'true'", 
                     "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
                     "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
                     "'!'", "'='", "':='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'.'", "':'", "'('", "')'", "'{'", "'}'", "'['", 
                     "']'", "','", "';'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\\n'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "IF", "ELSE", "FOR", "RETURN", 
                      "FUNC", "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", 
                      "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", 
                      "RANGE", "NIL", "TRUE", "FALSE", "PLUS", "MINUS", 
                      "MULTI", "DIV", "MODULO", "EQUAL", "NOT_EQUAL", "LESS_THAN", 
                      "LESS_EQUAL", "GREATER_THAN", "GREATER_EQUAL", "AND", 
                      "OR", "NOT", "ASSIGN", "ASSIGN1", "PLUS_EQUAL", "MINUS_EQUAL", 
                      "MULTI_EQUAL", "DIV_EQUAL", "MODULO_EQUAL", "DOT", 
                      "COLON", "OPEN_ROUND", "CLOSE_ROUND", "OPEN_CURVE", 
                      "CLOSE_CURVE", "OPEN_SQUARE", "CLOSE_SQUARE", "COMMA", 
                      "SEMICOLON", "ID", "INT_LIT", "FLOAT_LIT", "STRING_LIT", 
                      "COMMENT_INLINE", "COMMENT_BLOCK", "NL", "WS", "ILLEGAL_ESCAPE", 
                      "UNCLOSE_STRING", "ERROR_CHAR" ]

    RULE_program = 0
    RULE_decl = 1
    RULE_typee = 2
    RULE_arrType = 3
    RULE_dimenList = 4
    RULE_structDecl = 5
    RULE_structBody = 6
    RULE_listField = 7
    RULE_field = 8
    RULE_interfaceDecl = 9
    RULE_interfaceBody = 10
    RULE_listMethod = 11
    RULE_method = 12
    RULE_paramList = 13
    RULE_paramPrime = 14
    RULE_param = 15
    RULE_nameList = 16
    RULE_varDecl = 17
    RULE_constDecl = 18
    RULE_literalConst = 19
    RULE_funcDecl = 20
    RULE_paramListFunc = 21
    RULE_paramPrimeFunc = 22
    RULE_paramFunc = 23
    RULE_funcBody = 24
    RULE_methodStructDecl = 25
    RULE_arrAccess = 26
    RULE_positionList = 27
    RULE_exprA = 28
    RULE_exprA1 = 29
    RULE_exprA2 = 30
    RULE_exprA3 = 31
    RULE_exprA4 = 32
    RULE_exprA5 = 33
    RULE_exprA6 = 34
    RULE_operandA = 35
    RULE_structAccess = 36
    RULE_refList = 37
    RULE_exprS = 38
    RULE_exprS1 = 39
    RULE_exprS2 = 40
    RULE_exprS3 = 41
    RULE_exprS4 = 42
    RULE_exprS5 = 43
    RULE_exprS6 = 44
    RULE_operandS = 45
    RULE_arrLit = 46
    RULE_arrBody = 47
    RULE_elementList = 48
    RULE_element = 49
    RULE_structLit = 50
    RULE_structElList = 51
    RULE_structELPrime = 52
    RULE_structEL = 53
    RULE_funcCall = 54
    RULE_argumentList = 55
    RULE_methodCall = 56
    RULE_exprM = 57
    RULE_exprM1 = 58
    RULE_exprM2 = 59
    RULE_exprM3 = 60
    RULE_exprM4 = 61
    RULE_exprM5 = 62
    RULE_exprM6 = 63
    RULE_operandM = 64
    RULE_expr = 65
    RULE_expr1 = 66
    RULE_expr2 = 67
    RULE_expr3 = 68
    RULE_expr4 = 69
    RULE_expr5 = 70
    RULE_expr6 = 71
    RULE_operand = 72
    RULE_literal = 73
    RULE_statement = 74
    RULE_statementList = 75
    RULE_statementListPrime = 76
    RULE_varDeclStatement = 77
    RULE_constDeclStatement = 78
    RULE_assignment = 79
    RULE_lhs = 80
    RULE_assignOperator = 81
    RULE_rhs = 82
    RULE_ifStatement = 83
    RULE_elifList = 84
    RULE_eliff = 85
    RULE_forStatement = 86
    RULE_forBasic = 87
    RULE_forInitial = 88
    RULE_initialization = 89
    RULE_varDeclInitial = 90
    RULE_condition = 91
    RULE_update = 92
    RULE_forRange = 93
    RULE_breakStatement = 94
    RULE_continueStatement = 95
    RULE_callStatement = 96
    RULE_returnStatement = 97

    ruleNames =  [ "program", "decl", "typee", "arrType", "dimenList", "structDecl", 
                   "structBody", "listField", "field", "interfaceDecl", 
                   "interfaceBody", "listMethod", "method", "paramList", 
                   "paramPrime", "param", "nameList", "varDecl", "constDecl", 
                   "literalConst", "funcDecl", "paramListFunc", "paramPrimeFunc", 
                   "paramFunc", "funcBody", "methodStructDecl", "arrAccess", 
                   "positionList", "exprA", "exprA1", "exprA2", "exprA3", 
                   "exprA4", "exprA5", "exprA6", "operandA", "structAccess", 
                   "refList", "exprS", "exprS1", "exprS2", "exprS3", "exprS4", 
                   "exprS5", "exprS6", "operandS", "arrLit", "arrBody", 
                   "elementList", "element", "structLit", "structElList", 
                   "structELPrime", "structEL", "funcCall", "argumentList", 
                   "methodCall", "exprM", "exprM1", "exprM2", "exprM3", 
                   "exprM4", "exprM5", "exprM6", "operandM", "expr", "expr1", 
                   "expr2", "expr3", "expr4", "expr5", "expr6", "operand", 
                   "literal", "statement", "statementList", "statementListPrime", 
                   "varDeclStatement", "constDeclStatement", "assignment", 
                   "lhs", "assignOperator", "rhs", "ifStatement", "elifList", 
                   "eliff", "forStatement", "forBasic", "forInitial", "initialization", 
                   "varDeclInitial", "condition", "update", "forRange", 
                   "breakStatement", "continueStatement", "callStatement", 
                   "returnStatement" ]

    EOF = Token.EOF
    T__0=1
    IF=2
    ELSE=3
    FOR=4
    RETURN=5
    FUNC=6
    TYPE=7
    STRUCT=8
    INTERFACE=9
    STRING=10
    INT=11
    FLOAT=12
    BOOLEAN=13
    CONST=14
    VAR=15
    CONTINUE=16
    BREAK=17
    RANGE=18
    NIL=19
    TRUE=20
    FALSE=21
    PLUS=22
    MINUS=23
    MULTI=24
    DIV=25
    MODULO=26
    EQUAL=27
    NOT_EQUAL=28
    LESS_THAN=29
    LESS_EQUAL=30
    GREATER_THAN=31
    GREATER_EQUAL=32
    AND=33
    OR=34
    NOT=35
    ASSIGN=36
    ASSIGN1=37
    PLUS_EQUAL=38
    MINUS_EQUAL=39
    MULTI_EQUAL=40
    DIV_EQUAL=41
    MODULO_EQUAL=42
    DOT=43
    COLON=44
    OPEN_ROUND=45
    CLOSE_ROUND=46
    OPEN_CURVE=47
    CLOSE_CURVE=48
    OPEN_SQUARE=49
    CLOSE_SQUARE=50
    COMMA=51
    SEMICOLON=52
    ID=53
    INT_LIT=54
    FLOAT_LIT=55
    STRING_LIT=56
    COMMENT_INLINE=57
    COMMENT_BLOCK=58
    NL=59
    WS=60
    ILLEGAL_ESCAPE=61
    UNCLOSE_STRING=62
    ERROR_CHAR=63

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.DeclContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.DeclContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_program




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 196
                self.decl()
                self.state = 199 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 49344) != 0)):
                    break

            self.state = 201
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDecl(self):
            return self.getTypedRuleContext(MiniGoParser.StructDeclContext,0)


        def interfaceDecl(self):
            return self.getTypedRuleContext(MiniGoParser.InterfaceDeclContext,0)


        def varDecl(self):
            return self.getTypedRuleContext(MiniGoParser.VarDeclContext,0)


        def constDecl(self):
            return self.getTypedRuleContext(MiniGoParser.ConstDeclContext,0)


        def funcDecl(self):
            return self.getTypedRuleContext(MiniGoParser.FuncDeclContext,0)


        def methodStructDecl(self):
            return self.getTypedRuleContext(MiniGoParser.MethodStructDeclContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_decl




    def decl(self):

        localctx = MiniGoParser.DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_decl)
        try:
            self.state = 209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 203
                self.structDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 204
                self.interfaceDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 205
                self.varDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 206
                self.constDecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 207
                self.funcDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 208
                self.methodStructDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MiniGoParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def arrType(self):
            return self.getTypedRuleContext(MiniGoParser.ArrTypeContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_typee




    def typee(self):

        localctx = MiniGoParser.TypeeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typee)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.state = 211
                self.match(MiniGoParser.INT)
                pass
            elif token in [12]:
                self.state = 212
                self.match(MiniGoParser.FLOAT)
                pass
            elif token in [13]:
                self.state = 213
                self.match(MiniGoParser.BOOLEAN)
                pass
            elif token in [10]:
                self.state = 214
                self.match(MiniGoParser.STRING)
                pass
            elif token in [49]:
                self.state = 215
                self.arrType()
                pass
            elif token in [53]:
                self.state = 216
                self.match(MiniGoParser.ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimenList(self):
            return self.getTypedRuleContext(MiniGoParser.DimenListContext,0)


        def INT(self):
            return self.getToken(MiniGoParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arrType




    def arrType(self):

        localctx = MiniGoParser.ArrTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_arrType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.dimenList()
            self.state = 220
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 9007199254756352) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimenListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE(self):
            return self.getToken(MiniGoParser.OPEN_SQUARE, 0)

        def CLOSE_SQUARE(self):
            return self.getToken(MiniGoParser.CLOSE_SQUARE, 0)

        def dimenList(self):
            return self.getTypedRuleContext(MiniGoParser.DimenListContext,0)


        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_dimenList




    def dimenList(self):

        localctx = MiniGoParser.DimenListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dimenList)
        self._la = 0 # Token type
        try:
            self.state = 229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 222
                self.match(MiniGoParser.OPEN_SQUARE)
                self.state = 223
                _la = self._input.LA(1)
                if not(_la==53 or _la==54):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 224
                self.match(MiniGoParser.CLOSE_SQUARE)
                self.state = 225
                self.dimenList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 226
                self.match(MiniGoParser.OPEN_SQUARE)
                self.state = 227
                _la = self._input.LA(1)
                if not(_la==53 or _la==54):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 228
                self.match(MiniGoParser.CLOSE_SQUARE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def OPEN_CURVE(self):
            return self.getToken(MiniGoParser.OPEN_CURVE, 0)

        def structBody(self):
            return self.getTypedRuleContext(MiniGoParser.StructBodyContext,0)


        def CLOSE_CURVE(self):
            return self.getToken(MiniGoParser.CLOSE_CURVE, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_structDecl




    def structDecl(self):

        localctx = MiniGoParser.StructDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_structDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.match(MiniGoParser.TYPE)
            self.state = 232
            self.match(MiniGoParser.ID)
            self.state = 233
            self.match(MiniGoParser.STRUCT)
            self.state = 234
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 235
            self.structBody()
            self.state = 236
            self.match(MiniGoParser.CLOSE_CURVE)
            self.state = 237
            _la = self._input.LA(1)
            if not(_la==52 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def listField(self):
            return self.getTypedRuleContext(MiniGoParser.ListFieldContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_structBody




    def structBody(self):

        localctx = MiniGoParser.StructBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_structBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.listField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self):
            return self.getTypedRuleContext(MiniGoParser.FieldContext,0)


        def listField(self):
            return self.getTypedRuleContext(MiniGoParser.ListFieldContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_listField




    def listField(self):

        localctx = MiniGoParser.ListFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_listField)
        try:
            self.state = 245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 241
                self.field()
                self.state = 242
                self.listField()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.field()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def typee(self):
            return self.getTypedRuleContext(MiniGoParser.TypeeContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_field




    def field(self):

        localctx = MiniGoParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(MiniGoParser.ID)
            self.state = 248
            self.typee()
            self.state = 249
            _la = self._input.LA(1)
            if not(_la==52 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def OPEN_CURVE(self):
            return self.getToken(MiniGoParser.OPEN_CURVE, 0)

        def interfaceBody(self):
            return self.getTypedRuleContext(MiniGoParser.InterfaceBodyContext,0)


        def CLOSE_CURVE(self):
            return self.getToken(MiniGoParser.CLOSE_CURVE, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_interfaceDecl




    def interfaceDecl(self):

        localctx = MiniGoParser.InterfaceDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_interfaceDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(MiniGoParser.TYPE)
            self.state = 252
            self.match(MiniGoParser.ID)
            self.state = 253
            self.match(MiniGoParser.INTERFACE)
            self.state = 254
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 255
            self.interfaceBody()
            self.state = 256
            self.match(MiniGoParser.CLOSE_CURVE)
            self.state = 257
            _la = self._input.LA(1)
            if not(_la==52 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def listMethod(self):
            return self.getTypedRuleContext(MiniGoParser.ListMethodContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interfaceBody




    def interfaceBody(self):

        localctx = MiniGoParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_interfaceBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.listMethod()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method(self):
            return self.getTypedRuleContext(MiniGoParser.MethodContext,0)


        def listMethod(self):
            return self.getTypedRuleContext(MiniGoParser.ListMethodContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_listMethod




    def listMethod(self):

        localctx = MiniGoParser.ListMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_listMethod)
        try:
            self.state = 265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self.method()
                self.state = 262
                self.listMethod()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self.method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def OPEN_ROUND(self):
            return self.getToken(MiniGoParser.OPEN_ROUND, 0)

        def paramList(self):
            return self.getTypedRuleContext(MiniGoParser.ParamListContext,0)


        def CLOSE_ROUND(self):
            return self.getToken(MiniGoParser.CLOSE_ROUND, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def typee(self):
            return self.getTypedRuleContext(MiniGoParser.TypeeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method




    def method(self):

        localctx = MiniGoParser.MethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(MiniGoParser.ID)
            self.state = 268
            self.match(MiniGoParser.OPEN_ROUND)
            self.state = 269
            self.paramList()
            self.state = 270
            self.match(MiniGoParser.CLOSE_ROUND)
            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9570149208177664) != 0):
                self.state = 271
                self.typee()


            self.state = 274
            _la = self._input.LA(1)
            if not(_la==52 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramPrime(self):
            return self.getTypedRuleContext(MiniGoParser.ParamPrimeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_paramList




    def paramList(self):

        localctx = MiniGoParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_paramList)
        try:
            self.state = 278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.paramPrime()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamPrimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(MiniGoParser.ParamContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def paramPrime(self):
            return self.getTypedRuleContext(MiniGoParser.ParamPrimeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_paramPrime




    def paramPrime(self):

        localctx = MiniGoParser.ParamPrimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_paramPrime)
        try:
            self.state = 285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 280
                self.param()
                self.state = 281
                self.match(MiniGoParser.COMMA)
                self.state = 282
                self.paramPrime()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 284
                self.param()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameList(self):
            return self.getTypedRuleContext(MiniGoParser.NameListContext,0)


        def typee(self):
            return self.getTypedRuleContext(MiniGoParser.TypeeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_param




    def param(self):

        localctx = MiniGoParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.nameList()
            self.state = 288
            self.typee()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def nameList(self):
            return self.getTypedRuleContext(MiniGoParser.NameListContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_nameList




    def nameList(self):

        localctx = MiniGoParser.NameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_nameList)
        try:
            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 290
                self.match(MiniGoParser.ID)
                self.state = 291
                self.match(MiniGoParser.COMMA)
                self.state = 292
                self.nameList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 293
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def typee(self):
            return self.getTypedRuleContext(MiniGoParser.TypeeContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_varDecl




    def varDecl(self):

        localctx = MiniGoParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_varDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(MiniGoParser.VAR)
            self.state = 297
            self.match(MiniGoParser.ID)
            self.state = 305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 298
                self.typee()
                self.state = 299
                self.match(MiniGoParser.ASSIGN)
                self.state = 300
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 302
                self.match(MiniGoParser.ASSIGN)
                self.state = 303
                self.expr(0)
                pass

            elif la_ == 3:
                self.state = 304
                self.typee()
                pass


            self.state = 307
            self.match(MiniGoParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def literalConst(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralConstContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_constDecl




    def constDecl(self):

        localctx = MiniGoParser.ConstDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_constDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(MiniGoParser.CONST)
            self.state = 310
            self.match(MiniGoParser.ID)
            self.state = 311
            self.match(MiniGoParser.ASSIGN)
            self.state = 314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 312
                self.literalConst()
                pass

            elif la_ == 2:
                self.state = 313
                self.expr(0)
                pass


            self.state = 316
            self.match(MiniGoParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literalConst




    def literalConst(self):

        localctx = MiniGoParser.LiteralConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_literalConst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 126100789570043904) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def OPEN_ROUND(self):
            return self.getToken(MiniGoParser.OPEN_ROUND, 0)

        def paramListFunc(self):
            return self.getTypedRuleContext(MiniGoParser.ParamListFuncContext,0)


        def CLOSE_ROUND(self):
            return self.getToken(MiniGoParser.CLOSE_ROUND, 0)

        def OPEN_CURVE(self):
            return self.getToken(MiniGoParser.OPEN_CURVE, 0)

        def funcBody(self):
            return self.getTypedRuleContext(MiniGoParser.FuncBodyContext,0)


        def CLOSE_CURVE(self):
            return self.getToken(MiniGoParser.CLOSE_CURVE, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def typee(self):
            return self.getTypedRuleContext(MiniGoParser.TypeeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_funcDecl




    def funcDecl(self):

        localctx = MiniGoParser.FuncDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_funcDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(MiniGoParser.FUNC)
            self.state = 321
            self.match(MiniGoParser.ID)
            self.state = 322
            self.match(MiniGoParser.OPEN_ROUND)
            self.state = 323
            self.paramListFunc()
            self.state = 324
            self.match(MiniGoParser.CLOSE_ROUND)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9570149208177664) != 0):
                self.state = 325
                self.typee()


            self.state = 328
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 329
            self.funcBody()
            self.state = 330
            self.match(MiniGoParser.CLOSE_CURVE)
            self.state = 331
            self.match(MiniGoParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListFuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramPrimeFunc(self):
            return self.getTypedRuleContext(MiniGoParser.ParamPrimeFuncContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_paramListFunc




    def paramListFunc(self):

        localctx = MiniGoParser.ParamListFuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_paramListFunc)
        try:
            self.state = 335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self.paramPrimeFunc()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamPrimeFuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramFunc(self):
            return self.getTypedRuleContext(MiniGoParser.ParamFuncContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def paramPrimeFunc(self):
            return self.getTypedRuleContext(MiniGoParser.ParamPrimeFuncContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_paramPrimeFunc




    def paramPrimeFunc(self):

        localctx = MiniGoParser.ParamPrimeFuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_paramPrimeFunc)
        try:
            self.state = 342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 337
                self.paramFunc()
                self.state = 338
                self.match(MiniGoParser.COMMA)
                self.state = 339
                self.paramPrimeFunc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.paramFunc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamFuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def typee(self):
            return self.getTypedRuleContext(MiniGoParser.TypeeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_paramFunc




    def paramFunc(self):

        localctx = MiniGoParser.ParamFuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_paramFunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(MiniGoParser.ID)
            self.state = 345
            self.typee()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementList(self):
            return self.getTypedRuleContext(MiniGoParser.StatementListContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_funcBody




    def funcBody(self):

        localctx = MiniGoParser.FuncBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_funcBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.statementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodStructDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def OPEN_ROUND(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.OPEN_ROUND)
            else:
                return self.getToken(MiniGoParser.OPEN_ROUND, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def CLOSE_ROUND(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.CLOSE_ROUND)
            else:
                return self.getToken(MiniGoParser.CLOSE_ROUND, i)

        def paramListFunc(self):
            return self.getTypedRuleContext(MiniGoParser.ParamListFuncContext,0)


        def OPEN_CURVE(self):
            return self.getToken(MiniGoParser.OPEN_CURVE, 0)

        def funcBody(self):
            return self.getTypedRuleContext(MiniGoParser.FuncBodyContext,0)


        def CLOSE_CURVE(self):
            return self.getToken(MiniGoParser.CLOSE_CURVE, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def typee(self):
            return self.getTypedRuleContext(MiniGoParser.TypeeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_methodStructDecl




    def methodStructDecl(self):

        localctx = MiniGoParser.MethodStructDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_methodStructDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.match(MiniGoParser.FUNC)
            self.state = 350
            self.match(MiniGoParser.OPEN_ROUND)
            self.state = 351
            self.match(MiniGoParser.ID)
            self.state = 352
            self.match(MiniGoParser.ID)
            self.state = 353
            self.match(MiniGoParser.CLOSE_ROUND)
            self.state = 354
            self.match(MiniGoParser.ID)
            self.state = 355
            self.match(MiniGoParser.OPEN_ROUND)
            self.state = 356
            self.paramListFunc()
            self.state = 357
            self.match(MiniGoParser.CLOSE_ROUND)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9570149208177664) != 0):
                self.state = 358
                self.typee()


            self.state = 361
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 362
            self.funcBody()
            self.state = 363
            self.match(MiniGoParser.CLOSE_CURVE)
            self.state = 364
            self.match(MiniGoParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprA(self):
            return self.getTypedRuleContext(MiniGoParser.ExprAContext,0)


        def positionList(self):
            return self.getTypedRuleContext(MiniGoParser.PositionListContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arrAccess




    def arrAccess(self):

        localctx = MiniGoParser.ArrAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_arrAccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.exprA(0)
            self.state = 367
            self.positionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE(self):
            return self.getToken(MiniGoParser.OPEN_SQUARE, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def CLOSE_SQUARE(self):
            return self.getToken(MiniGoParser.CLOSE_SQUARE, 0)

        def positionList(self):
            return self.getTypedRuleContext(MiniGoParser.PositionListContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_positionList




    def positionList(self):

        localctx = MiniGoParser.PositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_positionList)
        try:
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 369
                self.match(MiniGoParser.OPEN_SQUARE)
                self.state = 370
                self.expr(0)
                self.state = 371
                self.match(MiniGoParser.CLOSE_SQUARE)
                self.state = 372
                self.positionList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.match(MiniGoParser.OPEN_SQUARE)
                self.state = 375
                self.expr(0)
                self.state = 376
                self.match(MiniGoParser.CLOSE_SQUARE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprAContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprA1(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA1Context,0)


        def exprA(self):
            return self.getTypedRuleContext(MiniGoParser.ExprAContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprA



    def exprA(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprAContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_exprA, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.exprA1(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 388
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprAContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprA)
                    self.state = 383
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 384
                    self.match(MiniGoParser.OR)
                    self.state = 385
                    self.exprA1(0) 
                self.state = 390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprA1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprA2(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA2Context,0)


        def exprA1(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA1Context,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprA1



    def exprA1(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprA1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_exprA1, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.exprA2(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 399
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprA1Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprA1)
                    self.state = 394
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 395
                    self.match(MiniGoParser.AND)
                    self.state = 396
                    self.exprA2(0) 
                self.state = 401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprA2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprA3(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA3Context,0)


        def exprA2(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA2Context,0)


        def EQUAL(self):
            return self.getToken(MiniGoParser.EQUAL, 0)

        def NOT_EQUAL(self):
            return self.getToken(MiniGoParser.NOT_EQUAL, 0)

        def LESS_THAN(self):
            return self.getToken(MiniGoParser.LESS_THAN, 0)

        def LESS_EQUAL(self):
            return self.getToken(MiniGoParser.LESS_EQUAL, 0)

        def GREATER_THAN(self):
            return self.getToken(MiniGoParser.GREATER_THAN, 0)

        def GREATER_EQUAL(self):
            return self.getToken(MiniGoParser.GREATER_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprA2



    def exprA2(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprA2Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_exprA2, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.exprA3(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 410
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprA2Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprA2)
                    self.state = 405
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 406
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8455716864) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 407
                    self.exprA3(0) 
                self.state = 412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprA3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprA4(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA4Context,0)


        def exprA3(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA3Context,0)


        def PLUS(self):
            return self.getToken(MiniGoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprA3



    def exprA3(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprA3Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_exprA3, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.exprA4(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprA3Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprA3)
                    self.state = 416
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 417
                    _la = self._input.LA(1)
                    if not(_la==22 or _la==23):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 418
                    self.exprA4(0) 
                self.state = 423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprA4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprA5(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA5Context,0)


        def exprA4(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA4Context,0)


        def MULTI(self):
            return self.getToken(MiniGoParser.MULTI, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MODULO(self):
            return self.getToken(MiniGoParser.MODULO, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprA4



    def exprA4(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprA4Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_exprA4, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.exprA5()
            self._ctx.stop = self._input.LT(-1)
            self.state = 432
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprA4Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprA4)
                    self.state = 427
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 428
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 117440512) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 429
                    self.exprA5() 
                self.state = 434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprA5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprA5(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA5Context,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def exprA6(self):
            return self.getTypedRuleContext(MiniGoParser.ExprA6Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_exprA5




    def exprA5(self):

        localctx = MiniGoParser.ExprA5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_exprA5)
        self._la = 0 # Token type
        try:
            self.state = 438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 435
                _la = self._input.LA(1)
                if not(_la==23 or _la==35):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 436
                self.exprA5()
                pass
            elif token in [19, 20, 21, 45, 49, 53, 54, 55, 56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.exprA6()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprA6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND(self):
            return self.getToken(MiniGoParser.OPEN_ROUND, 0)

        def exprA(self):
            return self.getTypedRuleContext(MiniGoParser.ExprAContext,0)


        def CLOSE_ROUND(self):
            return self.getToken(MiniGoParser.CLOSE_ROUND, 0)

        def operandA(self):
            return self.getTypedRuleContext(MiniGoParser.OperandAContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_exprA6




    def exprA6(self):

        localctx = MiniGoParser.ExprA6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_exprA6)
        try:
            self.state = 445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.match(MiniGoParser.OPEN_ROUND)
                self.state = 441
                self.exprA(0)
                self.state = 442
                self.match(MiniGoParser.CLOSE_ROUND)
                pass
            elif token in [19, 20, 21, 49, 53, 54, 55, 56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 444
                self.operandA()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandAContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def literal(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralContext,0)


        def funcCall(self):
            return self.getTypedRuleContext(MiniGoParser.FuncCallContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_operandA




    def operandA(self):

        localctx = MiniGoParser.OperandAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_operandA)
        try:
            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 448
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 449
                self.funcCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def refList(self):
            return self.getTypedRuleContext(MiniGoParser.RefListContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_structAccess




    def structAccess(self):

        localctx = MiniGoParser.StructAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structAccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.refList(0)
            self.state = 453
            self.match(MiniGoParser.DOT)
            self.state = 454
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprS(self):
            return self.getTypedRuleContext(MiniGoParser.ExprSContext,0)


        def refList(self):
            return self.getTypedRuleContext(MiniGoParser.RefListContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_refList



    def refList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.RefListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_refList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.exprS(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 464
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.RefListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_refList)
                    self.state = 459
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 460
                    self.match(MiniGoParser.DOT)
                    self.state = 461
                    self.exprS(0) 
                self.state = 466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprS1(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS1Context,0)


        def exprS(self):
            return self.getTypedRuleContext(MiniGoParser.ExprSContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprS



    def exprS(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprSContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_exprS, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.exprS1(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprSContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprS)
                    self.state = 470
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 471
                    self.match(MiniGoParser.OR)
                    self.state = 472
                    self.exprS1(0) 
                self.state = 477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprS1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprS2(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS2Context,0)


        def exprS1(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS1Context,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprS1



    def exprS1(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprS1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_exprS1, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.exprS2(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 486
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprS1Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprS1)
                    self.state = 481
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 482
                    self.match(MiniGoParser.AND)
                    self.state = 483
                    self.exprS2(0) 
                self.state = 488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprS2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprS3(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS3Context,0)


        def exprS2(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS2Context,0)


        def EQUAL(self):
            return self.getToken(MiniGoParser.EQUAL, 0)

        def NOT_EQUAL(self):
            return self.getToken(MiniGoParser.NOT_EQUAL, 0)

        def LESS_THAN(self):
            return self.getToken(MiniGoParser.LESS_THAN, 0)

        def LESS_EQUAL(self):
            return self.getToken(MiniGoParser.LESS_EQUAL, 0)

        def GREATER_THAN(self):
            return self.getToken(MiniGoParser.GREATER_THAN, 0)

        def GREATER_EQUAL(self):
            return self.getToken(MiniGoParser.GREATER_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprS2



    def exprS2(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprS2Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_exprS2, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.exprS3(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 497
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprS2Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprS2)
                    self.state = 492
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 493
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8455716864) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 494
                    self.exprS3(0) 
                self.state = 499
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprS3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprS4(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS4Context,0)


        def exprS3(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS3Context,0)


        def PLUS(self):
            return self.getToken(MiniGoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprS3



    def exprS3(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprS3Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_exprS3, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.exprS4(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 508
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprS3Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprS3)
                    self.state = 503
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 504
                    _la = self._input.LA(1)
                    if not(_la==22 or _la==23):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 505
                    self.exprS4(0) 
                self.state = 510
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprS4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprS5(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS5Context,0)


        def exprS4(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS4Context,0)


        def MULTI(self):
            return self.getToken(MiniGoParser.MULTI, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MODULO(self):
            return self.getToken(MiniGoParser.MODULO, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprS4



    def exprS4(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprS4Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_exprS4, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.exprS5()
            self._ctx.stop = self._input.LT(-1)
            self.state = 519
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprS4Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprS4)
                    self.state = 514
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 515
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 117440512) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 516
                    self.exprS5() 
                self.state = 521
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprS5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprS5(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS5Context,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def exprS6(self):
            return self.getTypedRuleContext(MiniGoParser.ExprS6Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_exprS5




    def exprS5(self):

        localctx = MiniGoParser.ExprS5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_exprS5)
        self._la = 0 # Token type
        try:
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 522
                _la = self._input.LA(1)
                if not(_la==23 or _la==35):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 523
                self.exprS5()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 524
                self.exprS6()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprS6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND(self):
            return self.getToken(MiniGoParser.OPEN_ROUND, 0)

        def exprS(self):
            return self.getTypedRuleContext(MiniGoParser.ExprSContext,0)


        def CLOSE_ROUND(self):
            return self.getToken(MiniGoParser.CLOSE_ROUND, 0)

        def operandS(self):
            return self.getTypedRuleContext(MiniGoParser.OperandSContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_exprS6




    def exprS6(self):

        localctx = MiniGoParser.ExprS6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_exprS6)
        try:
            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self.match(MiniGoParser.OPEN_ROUND)
                self.state = 528
                self.exprS(0)
                self.state = 529
                self.match(MiniGoParser.CLOSE_ROUND)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.operandS()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrAccess(self):
            return self.getTypedRuleContext(MiniGoParser.ArrAccessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_operandS




    def operandS(self):

        localctx = MiniGoParser.OperandSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_operandS)
        try:
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.arrAccess()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrType(self):
            return self.getTypedRuleContext(MiniGoParser.ArrTypeContext,0)


        def arrBody(self):
            return self.getTypedRuleContext(MiniGoParser.ArrBodyContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arrLit




    def arrLit(self):

        localctx = MiniGoParser.ArrLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_arrLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.arrType()
            self.state = 539
            self.arrBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURVE(self):
            return self.getToken(MiniGoParser.OPEN_CURVE, 0)

        def elementList(self):
            return self.getTypedRuleContext(MiniGoParser.ElementListContext,0)


        def CLOSE_CURVE(self):
            return self.getToken(MiniGoParser.CLOSE_CURVE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arrBody




    def arrBody(self):

        localctx = MiniGoParser.ArrBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_arrBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 542
            self.elementList()
            self.state = 543
            self.match(MiniGoParser.CLOSE_CURVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self):
            return self.getTypedRuleContext(MiniGoParser.ElementContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def elementList(self):
            return self.getTypedRuleContext(MiniGoParser.ElementListContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_elementList




    def elementList(self):

        localctx = MiniGoParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_elementList)
        try:
            self.state = 550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 545
                self.element()
                self.state = 546
                self.match(MiniGoParser.COMMA)
                self.state = 547
                self.elementList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 549
                self.element()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def arrBody(self):
            return self.getTypedRuleContext(MiniGoParser.ArrBodyContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_element




    def element(self):

        localctx = MiniGoParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_element)
        try:
            self.state = 554
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20, 21, 23, 35, 45, 49, 53, 54, 55, 56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 552
                self.expr(0)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 553
                self.arrBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def OPEN_CURVE(self):
            return self.getToken(MiniGoParser.OPEN_CURVE, 0)

        def structElList(self):
            return self.getTypedRuleContext(MiniGoParser.StructElListContext,0)


        def CLOSE_CURVE(self):
            return self.getToken(MiniGoParser.CLOSE_CURVE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_structLit




    def structLit(self):

        localctx = MiniGoParser.StructLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_structLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(MiniGoParser.ID)
            self.state = 557
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 558
            self.structElList()
            self.state = 559
            self.match(MiniGoParser.CLOSE_CURVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructElListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structELPrime(self):
            return self.getTypedRuleContext(MiniGoParser.StructELPrimeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_structElList




    def structElList(self):

        localctx = MiniGoParser.StructElListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_structElList)
        try:
            self.state = 563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 561
                self.structELPrime()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructELPrimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structEL(self):
            return self.getTypedRuleContext(MiniGoParser.StructELContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def structELPrime(self):
            return self.getTypedRuleContext(MiniGoParser.StructELPrimeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_structELPrime




    def structELPrime(self):

        localctx = MiniGoParser.StructELPrimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_structELPrime)
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.structEL()
                self.state = 566
                self.match(MiniGoParser.COMMA)
                self.state = 567
                self.structELPrime()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.structEL()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructELContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLON(self):
            return self.getToken(MiniGoParser.COLON, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_structEL




    def structEL(self):

        localctx = MiniGoParser.StructELContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_structEL)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(MiniGoParser.ID)
            self.state = 573
            self.match(MiniGoParser.COLON)
            self.state = 574
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def OPEN_ROUND(self):
            return self.getToken(MiniGoParser.OPEN_ROUND, 0)

        def argumentList(self):
            return self.getTypedRuleContext(MiniGoParser.ArgumentListContext,0)


        def CLOSE_ROUND(self):
            return self.getToken(MiniGoParser.CLOSE_ROUND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_funcCall




    def funcCall(self):

        localctx = MiniGoParser.FuncCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_funcCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(MiniGoParser.ID)
            self.state = 577
            self.match(MiniGoParser.OPEN_ROUND)
            self.state = 578
            self.argumentList()
            self.state = 579
            self.match(MiniGoParser.CLOSE_ROUND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementList(self):
            return self.getTypedRuleContext(MiniGoParser.ElementListContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_argumentList




    def argumentList(self):

        localctx = MiniGoParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_argumentList)
        try:
            self.state = 583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20, 21, 23, 35, 45, 47, 49, 53, 54, 55, 56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 581
                self.elementList()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprM(self):
            return self.getTypedRuleContext(MiniGoParser.ExprMContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def OPEN_ROUND(self):
            return self.getToken(MiniGoParser.OPEN_ROUND, 0)

        def argumentList(self):
            return self.getTypedRuleContext(MiniGoParser.ArgumentListContext,0)


        def CLOSE_ROUND(self):
            return self.getToken(MiniGoParser.CLOSE_ROUND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_methodCall




    def methodCall(self):

        localctx = MiniGoParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.exprM(0)
            self.state = 586
            self.match(MiniGoParser.DOT)
            self.state = 587
            self.match(MiniGoParser.ID)
            self.state = 588
            self.match(MiniGoParser.OPEN_ROUND)
            self.state = 589
            self.argumentList()
            self.state = 590
            self.match(MiniGoParser.CLOSE_ROUND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprMContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprM1(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM1Context,0)


        def exprM(self):
            return self.getTypedRuleContext(MiniGoParser.ExprMContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprM



    def exprM(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprMContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_exprM, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.exprM1(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 600
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprMContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprM)
                    self.state = 595
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 596
                    self.match(MiniGoParser.OR)
                    self.state = 597
                    self.exprM1(0) 
                self.state = 602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprM1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprM2(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM2Context,0)


        def exprM1(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM1Context,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprM1



    def exprM1(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprM1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_exprM1, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.exprM2(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 611
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprM1Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprM1)
                    self.state = 606
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 607
                    self.match(MiniGoParser.AND)
                    self.state = 608
                    self.exprM2(0) 
                self.state = 613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprM2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprM3(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM3Context,0)


        def exprM2(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM2Context,0)


        def EQUAL(self):
            return self.getToken(MiniGoParser.EQUAL, 0)

        def NOT_EQUAL(self):
            return self.getToken(MiniGoParser.NOT_EQUAL, 0)

        def LESS_THAN(self):
            return self.getToken(MiniGoParser.LESS_THAN, 0)

        def LESS_EQUAL(self):
            return self.getToken(MiniGoParser.LESS_EQUAL, 0)

        def GREATER_THAN(self):
            return self.getToken(MiniGoParser.GREATER_THAN, 0)

        def GREATER_EQUAL(self):
            return self.getToken(MiniGoParser.GREATER_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprM2



    def exprM2(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprM2Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_exprM2, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.exprM3(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 622
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprM2Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprM2)
                    self.state = 617
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 618
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8455716864) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 619
                    self.exprM3(0) 
                self.state = 624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprM3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprM4(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM4Context,0)


        def exprM3(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM3Context,0)


        def PLUS(self):
            return self.getToken(MiniGoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprM3



    def exprM3(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprM3Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_exprM3, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.exprM4(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprM3Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprM3)
                    self.state = 628
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 629
                    _la = self._input.LA(1)
                    if not(_la==22 or _la==23):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 630
                    self.exprM4(0) 
                self.state = 635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprM4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprM5(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM5Context,0)


        def exprM4(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM4Context,0)


        def MULTI(self):
            return self.getToken(MiniGoParser.MULTI, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MODULO(self):
            return self.getToken(MiniGoParser.MODULO, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_exprM4



    def exprM4(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprM4Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_exprM4, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.exprM5()
            self._ctx.stop = self._input.LT(-1)
            self.state = 644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprM4Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exprM4)
                    self.state = 639
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 640
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 117440512) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 641
                    self.exprM5() 
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprM5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprM5(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM5Context,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def exprM6(self):
            return self.getTypedRuleContext(MiniGoParser.ExprM6Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_exprM5




    def exprM5(self):

        localctx = MiniGoParser.ExprM5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_exprM5)
        self._la = 0 # Token type
        try:
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                _la = self._input.LA(1)
                if not(_la==23 or _la==35):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 648
                self.exprM5()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 649
                self.exprM6()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprM6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND(self):
            return self.getToken(MiniGoParser.OPEN_ROUND, 0)

        def exprM(self):
            return self.getTypedRuleContext(MiniGoParser.ExprMContext,0)


        def CLOSE_ROUND(self):
            return self.getToken(MiniGoParser.CLOSE_ROUND, 0)

        def operandM(self):
            return self.getTypedRuleContext(MiniGoParser.OperandMContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_exprM6




    def exprM6(self):

        localctx = MiniGoParser.ExprM6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_exprM6)
        try:
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.match(MiniGoParser.OPEN_ROUND)
                self.state = 653
                self.exprM(0)
                self.state = 654
                self.match(MiniGoParser.CLOSE_ROUND)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.operandM()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandMContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def literal(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralContext,0)


        def arrAccess(self):
            return self.getTypedRuleContext(MiniGoParser.ArrAccessContext,0)


        def structAccess(self):
            return self.getTypedRuleContext(MiniGoParser.StructAccessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_operandM




    def operandM(self):

        localctx = MiniGoParser.OperandMContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_operandM)
        try:
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 661
                self.arrAccess()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 662
                self.structAccess()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr1(self):
            return self.getTypedRuleContext(MiniGoParser.Expr1Context,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expr



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.expr1(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 673
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                    self.state = 668
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 669
                    self.match(MiniGoParser.OR)
                    self.state = 670
                    self.expr1(0) 
                self.state = 675
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expr1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr2(self):
            return self.getTypedRuleContext(MiniGoParser.Expr2Context,0)


        def expr1(self):
            return self.getTypedRuleContext(MiniGoParser.Expr1Context,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expr1



    def expr1(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expr1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_expr1, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.expr2(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expr1Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr1)
                    self.state = 679
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 680
                    self.match(MiniGoParser.AND)
                    self.state = 681
                    self.expr2(0) 
                self.state = 686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expr2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr3(self):
            return self.getTypedRuleContext(MiniGoParser.Expr3Context,0)


        def expr2(self):
            return self.getTypedRuleContext(MiniGoParser.Expr2Context,0)


        def EQUAL(self):
            return self.getToken(MiniGoParser.EQUAL, 0)

        def NOT_EQUAL(self):
            return self.getToken(MiniGoParser.NOT_EQUAL, 0)

        def LESS_THAN(self):
            return self.getToken(MiniGoParser.LESS_THAN, 0)

        def LESS_EQUAL(self):
            return self.getToken(MiniGoParser.LESS_EQUAL, 0)

        def GREATER_THAN(self):
            return self.getToken(MiniGoParser.GREATER_THAN, 0)

        def GREATER_EQUAL(self):
            return self.getToken(MiniGoParser.GREATER_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expr2



    def expr2(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expr2Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_expr2, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.expr3(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expr2Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr2)
                    self.state = 690
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 691
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8455716864) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 692
                    self.expr3(0) 
                self.state = 697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expr3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr4(self):
            return self.getTypedRuleContext(MiniGoParser.Expr4Context,0)


        def expr3(self):
            return self.getTypedRuleContext(MiniGoParser.Expr3Context,0)


        def PLUS(self):
            return self.getToken(MiniGoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expr3



    def expr3(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expr3Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_expr3, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.expr4(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 706
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expr3Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr3)
                    self.state = 701
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 702
                    _la = self._input.LA(1)
                    if not(_la==22 or _la==23):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 703
                    self.expr4(0) 
                self.state = 708
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expr4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr5(self):
            return self.getTypedRuleContext(MiniGoParser.Expr5Context,0)


        def expr4(self):
            return self.getTypedRuleContext(MiniGoParser.Expr4Context,0)


        def MULTI(self):
            return self.getToken(MiniGoParser.MULTI, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MODULO(self):
            return self.getToken(MiniGoParser.MODULO, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expr4



    def expr4(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expr4Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_expr4, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.expr5()
            self._ctx.stop = self._input.LT(-1)
            self.state = 717
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expr4Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr4)
                    self.state = 712
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 713
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 117440512) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 714
                    self.expr5() 
                self.state = 719
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expr5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr5(self):
            return self.getTypedRuleContext(MiniGoParser.Expr5Context,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def MINUS(self):
            return self.getToken(MiniGoParser.MINUS, 0)

        def expr6(self):
            return self.getTypedRuleContext(MiniGoParser.Expr6Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expr5




    def expr5(self):

        localctx = MiniGoParser.Expr5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_expr5)
        self._la = 0 # Token type
        try:
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                _la = self._input.LA(1)
                if not(_la==23 or _la==35):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 721
                self.expr5()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 722
                self.expr6()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND(self):
            return self.getToken(MiniGoParser.OPEN_ROUND, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def CLOSE_ROUND(self):
            return self.getToken(MiniGoParser.CLOSE_ROUND, 0)

        def operand(self):
            return self.getTypedRuleContext(MiniGoParser.OperandContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expr6




    def expr6(self):

        localctx = MiniGoParser.Expr6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_expr6)
        try:
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 725
                self.match(MiniGoParser.OPEN_ROUND)
                self.state = 726
                self.expr(0)
                self.state = 727
                self.match(MiniGoParser.CLOSE_ROUND)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 729
                self.operand()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def literal(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralContext,0)


        def funcCall(self):
            return self.getTypedRuleContext(MiniGoParser.FuncCallContext,0)


        def methodCall(self):
            return self.getTypedRuleContext(MiniGoParser.MethodCallContext,0)


        def arrAccess(self):
            return self.getTypedRuleContext(MiniGoParser.ArrAccessContext,0)


        def structAccess(self):
            return self.getTypedRuleContext(MiniGoParser.StructAccessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_operand




    def operand(self):

        localctx = MiniGoParser.OperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_operand)
        try:
            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 734
                self.funcCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 735
                self.methodCall()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 736
                self.arrAccess()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 737
                self.structAccess()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalConst(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralConstContext,0)


        def arrLit(self):
            return self.getTypedRuleContext(MiniGoParser.ArrLitContext,0)


        def structLit(self):
            return self.getTypedRuleContext(MiniGoParser.StructLitContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_literal




    def literal(self):

        localctx = MiniGoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_literal)
        try:
            self.state = 743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20, 21, 54, 55, 56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.literalConst()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.arrLit()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 742
                self.structLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NL(self):
            return self.getToken(MiniGoParser.NL, 0)

        def varDeclStatement(self):
            return self.getTypedRuleContext(MiniGoParser.VarDeclStatementContext,0)


        def constDeclStatement(self):
            return self.getTypedRuleContext(MiniGoParser.ConstDeclStatementContext,0)


        def assignment(self):
            return self.getTypedRuleContext(MiniGoParser.AssignmentContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(MiniGoParser.IfStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(MiniGoParser.ForStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(MiniGoParser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(MiniGoParser.ContinueStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(MiniGoParser.CallStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(MiniGoParser.ReturnStatementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement




    def statement(self):

        localctx = MiniGoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 745
                self.varDeclStatement()
                pass

            elif la_ == 2:
                self.state = 746
                self.constDeclStatement()
                pass

            elif la_ == 3:
                self.state = 747
                self.assignment()
                pass

            elif la_ == 4:
                self.state = 748
                self.ifStatement()
                pass

            elif la_ == 5:
                self.state = 749
                self.forStatement()
                pass

            elif la_ == 6:
                self.state = 750
                self.breakStatement()
                pass

            elif la_ == 7:
                self.state = 751
                self.continueStatement()
                pass

            elif la_ == 8:
                self.state = 752
                self.callStatement()
                pass

            elif la_ == 9:
                self.state = 753
                self.returnStatement()
                pass


            self.state = 756
            _la = self._input.LA(1)
            if not(_la==52 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementListPrime(self):
            return self.getTypedRuleContext(MiniGoParser.StatementListPrimeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statementList




    def statementList(self):

        localctx = MiniGoParser.StatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_statementList)
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 5, 14, 15, 16, 17, 19, 20, 21, 23, 35, 45, 49, 53, 54, 55, 56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.statementListPrime()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementListPrimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MiniGoParser.StatementContext,0)


        def statementListPrime(self):
            return self.getTypedRuleContext(MiniGoParser.StatementListPrimeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statementListPrime




    def statementListPrime(self):

        localctx = MiniGoParser.StatementListPrimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_statementListPrime)
        try:
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.statement()
                self.state = 763
                self.statementListPrime()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def typee(self):
            return self.getTypedRuleContext(MiniGoParser.TypeeContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_varDeclStatement




    def varDeclStatement(self):

        localctx = MiniGoParser.VarDeclStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_varDeclStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(MiniGoParser.VAR)
            self.state = 769
            self.match(MiniGoParser.ID)
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 770
                self.typee()
                self.state = 771
                self.match(MiniGoParser.ASSIGN)
                self.state = 772
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 774
                self.match(MiniGoParser.ASSIGN)
                self.state = 775
                self.expr(0)
                pass

            elif la_ == 3:
                self.state = 776
                self.typee()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def literalConst(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralConstContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_constDeclStatement




    def constDeclStatement(self):

        localctx = MiniGoParser.ConstDeclStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_constDeclStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(MiniGoParser.CONST)
            self.state = 780
            self.match(MiniGoParser.ID)
            self.state = 781
            self.match(MiniGoParser.ASSIGN)
            self.state = 784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 782
                self.literalConst()
                pass

            elif la_ == 2:
                self.state = 783
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def assignOperator(self):
            return self.getTypedRuleContext(MiniGoParser.AssignOperatorContext,0)


        def rhs(self):
            return self.getTypedRuleContext(MiniGoParser.RhsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment




    def assignment(self):

        localctx = MiniGoParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.lhs()
            self.state = 787
            self.assignOperator()
            self.state = 788
            self.rhs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrAccess(self):
            return self.getTypedRuleContext(MiniGoParser.ArrAccessContext,0)


        def structAccess(self):
            return self.getTypedRuleContext(MiniGoParser.StructAccessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_lhs




    def lhs(self):

        localctx = MiniGoParser.LhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_lhs)
        try:
            self.state = 793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.arrAccess()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 792
                self.structAccess()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN1(self):
            return self.getToken(MiniGoParser.ASSIGN1, 0)

        def PLUS_EQUAL(self):
            return self.getToken(MiniGoParser.PLUS_EQUAL, 0)

        def MINUS_EQUAL(self):
            return self.getToken(MiniGoParser.MINUS_EQUAL, 0)

        def MULTI_EQUAL(self):
            return self.getToken(MiniGoParser.MULTI_EQUAL, 0)

        def DIV_EQUAL(self):
            return self.getToken(MiniGoParser.DIV_EQUAL, 0)

        def MODULO_EQUAL(self):
            return self.getToken(MiniGoParser.MODULO_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assignOperator




    def assignOperator(self):

        localctx = MiniGoParser.AssignOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assignOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8658654068736) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_rhs




    def rhs(self):

        localctx = MiniGoParser.RhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_rhs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def OPEN_ROUND(self):
            return self.getToken(MiniGoParser.OPEN_ROUND, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def CLOSE_ROUND(self):
            return self.getToken(MiniGoParser.CLOSE_ROUND, 0)

        def OPEN_CURVE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.OPEN_CURVE)
            else:
                return self.getToken(MiniGoParser.OPEN_CURVE, i)

        def statementList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.StatementListContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.StatementListContext,i)


        def CLOSE_CURVE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.CLOSE_CURVE)
            else:
                return self.getToken(MiniGoParser.CLOSE_CURVE, i)

        def elifList(self):
            return self.getTypedRuleContext(MiniGoParser.ElifListContext,0)


        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_ifStatement




    def ifStatement(self):

        localctx = MiniGoParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(MiniGoParser.IF)
            self.state = 800
            self.match(MiniGoParser.OPEN_ROUND)
            self.state = 801
            self.expr(0)
            self.state = 802
            self.match(MiniGoParser.CLOSE_ROUND)
            self.state = 803
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 804
            self.statementList()
            self.state = 805
            self.match(MiniGoParser.CLOSE_CURVE)
            self.state = 806
            self.elifList()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 807
                self.match(MiniGoParser.ELSE)
                self.state = 808
                self.match(MiniGoParser.OPEN_CURVE)
                self.state = 809
                self.statementList()
                self.state = 810
                self.match(MiniGoParser.CLOSE_CURVE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eliff(self):
            return self.getTypedRuleContext(MiniGoParser.EliffContext,0)


        def elifList(self):
            return self.getTypedRuleContext(MiniGoParser.ElifListContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_elifList




    def elifList(self):

        localctx = MiniGoParser.ElifListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_elifList)
        try:
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.eliff()
                self.state = 815
                self.elifList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EliffContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def OPEN_ROUND(self):
            return self.getToken(MiniGoParser.OPEN_ROUND, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def CLOSE_ROUND(self):
            return self.getToken(MiniGoParser.CLOSE_ROUND, 0)

        def OPEN_CURVE(self):
            return self.getToken(MiniGoParser.OPEN_CURVE, 0)

        def statementList(self):
            return self.getTypedRuleContext(MiniGoParser.StatementListContext,0)


        def CLOSE_CURVE(self):
            return self.getToken(MiniGoParser.CLOSE_CURVE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_eliff




    def eliff(self):

        localctx = MiniGoParser.EliffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_eliff)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(MiniGoParser.ELSE)
            self.state = 821
            self.match(MiniGoParser.IF)
            self.state = 822
            self.match(MiniGoParser.OPEN_ROUND)
            self.state = 823
            self.expr(0)
            self.state = 824
            self.match(MiniGoParser.CLOSE_ROUND)
            self.state = 825
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 826
            self.statementList()
            self.state = 827
            self.match(MiniGoParser.CLOSE_CURVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forBasic(self):
            return self.getTypedRuleContext(MiniGoParser.ForBasicContext,0)


        def forInitial(self):
            return self.getTypedRuleContext(MiniGoParser.ForInitialContext,0)


        def forRange(self):
            return self.getTypedRuleContext(MiniGoParser.ForRangeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_forStatement




    def forStatement(self):

        localctx = MiniGoParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_forStatement)
        try:
            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self.forBasic()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 830
                self.forInitial()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 831
                self.forRange()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForBasicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def OPEN_CURVE(self):
            return self.getToken(MiniGoParser.OPEN_CURVE, 0)

        def statementList(self):
            return self.getTypedRuleContext(MiniGoParser.StatementListContext,0)


        def CLOSE_CURVE(self):
            return self.getToken(MiniGoParser.CLOSE_CURVE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_forBasic




    def forBasic(self):

        localctx = MiniGoParser.ForBasicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_forBasic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(MiniGoParser.FOR)
            self.state = 835
            self.expr(0)
            self.state = 836
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 837
            self.statementList()
            self.state = 838
            self.match(MiniGoParser.CLOSE_CURVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def initialization(self):
            return self.getTypedRuleContext(MiniGoParser.InitializationContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMICOLON)
            else:
                return self.getToken(MiniGoParser.SEMICOLON, i)

        def condition(self):
            return self.getTypedRuleContext(MiniGoParser.ConditionContext,0)


        def update(self):
            return self.getTypedRuleContext(MiniGoParser.UpdateContext,0)


        def OPEN_CURVE(self):
            return self.getToken(MiniGoParser.OPEN_CURVE, 0)

        def statementList(self):
            return self.getTypedRuleContext(MiniGoParser.StatementListContext,0)


        def CLOSE_CURVE(self):
            return self.getToken(MiniGoParser.CLOSE_CURVE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_forInitial




    def forInitial(self):

        localctx = MiniGoParser.ForInitialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_forInitial)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(MiniGoParser.FOR)
            self.state = 841
            self.initialization()
            self.state = 842
            self.match(MiniGoParser.SEMICOLON)
            self.state = 843
            self.condition()
            self.state = 844
            self.match(MiniGoParser.SEMICOLON)
            self.state = 845
            self.update()
            self.state = 846
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 847
            self.statementList()
            self.state = 848
            self.match(MiniGoParser.CLOSE_CURVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(MiniGoParser.AssignmentContext,0)


        def varDeclInitial(self):
            return self.getTypedRuleContext(MiniGoParser.VarDeclInitialContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_initialization




    def initialization(self):

        localctx = MiniGoParser.InitializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_initialization)
        try:
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20, 21, 23, 35, 45, 49, 53, 54, 55, 56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self.assignment()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 851
                self.varDeclInitial()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclInitialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def typee(self):
            return self.getTypedRuleContext(MiniGoParser.TypeeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_varDeclInitial




    def varDeclInitial(self):

        localctx = MiniGoParser.VarDeclInitialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_varDeclInitial)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(MiniGoParser.VAR)
            self.state = 855
            self.match(MiniGoParser.ID)
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9570149208177664) != 0):
                self.state = 856
                self.typee()


            self.state = 859
            self.match(MiniGoParser.ASSIGN)
            self.state = 860
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_condition




    def condition(self):

        localctx = MiniGoParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(MiniGoParser.AssignmentContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_update




    def update(self):

        localctx = MiniGoParser.UpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.assignment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def ASSIGN1(self):
            return self.getToken(MiniGoParser.ASSIGN1, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def OPEN_CURVE(self):
            return self.getToken(MiniGoParser.OPEN_CURVE, 0)

        def statementList(self):
            return self.getTypedRuleContext(MiniGoParser.StatementListContext,0)


        def CLOSE_CURVE(self):
            return self.getToken(MiniGoParser.CLOSE_CURVE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_forRange




    def forRange(self):

        localctx = MiniGoParser.ForRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_forRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(MiniGoParser.FOR)
            self.state = 867
            _la = self._input.LA(1)
            if not(_la==1 or _la==53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 868
            self.match(MiniGoParser.COMMA)
            self.state = 869
            self.match(MiniGoParser.ID)
            self.state = 870
            self.match(MiniGoParser.ASSIGN1)
            self.state = 871
            self.match(MiniGoParser.RANGE)
            self.state = 872
            self.match(MiniGoParser.ID)
            self.state = 873
            self.match(MiniGoParser.OPEN_CURVE)
            self.state = 874
            self.statementList()
            self.state = 875
            self.match(MiniGoParser.CLOSE_CURVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_breakStatement




    def breakStatement(self):

        localctx = MiniGoParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(MiniGoParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_continueStatement




    def continueStatement(self):

        localctx = MiniGoParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(MiniGoParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcCall(self):
            return self.getTypedRuleContext(MiniGoParser.FuncCallContext,0)


        def methodCall(self):
            return self.getTypedRuleContext(MiniGoParser.MethodCallContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_callStatement




    def callStatement(self):

        localctx = MiniGoParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_callStatement)
        try:
            self.state = 883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.funcCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.methodCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MiniGoParser.RETURN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_returnStatement




    def returnStatement(self):

        localctx = MiniGoParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(MiniGoParser.RETURN)
            self.state = 886
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[28] = self.exprA_sempred
        self._predicates[29] = self.exprA1_sempred
        self._predicates[30] = self.exprA2_sempred
        self._predicates[31] = self.exprA3_sempred
        self._predicates[32] = self.exprA4_sempred
        self._predicates[37] = self.refList_sempred
        self._predicates[38] = self.exprS_sempred
        self._predicates[39] = self.exprS1_sempred
        self._predicates[40] = self.exprS2_sempred
        self._predicates[41] = self.exprS3_sempred
        self._predicates[42] = self.exprS4_sempred
        self._predicates[57] = self.exprM_sempred
        self._predicates[58] = self.exprM1_sempred
        self._predicates[59] = self.exprM2_sempred
        self._predicates[60] = self.exprM3_sempred
        self._predicates[61] = self.exprM4_sempred
        self._predicates[65] = self.expr_sempred
        self._predicates[66] = self.expr1_sempred
        self._predicates[67] = self.expr2_sempred
        self._predicates[68] = self.expr3_sempred
        self._predicates[69] = self.expr4_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def exprA_sempred(self, localctx:ExprAContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def exprA1_sempred(self, localctx:ExprA1Context, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def exprA2_sempred(self, localctx:ExprA2Context, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def exprA3_sempred(self, localctx:ExprA3Context, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def exprA4_sempred(self, localctx:ExprA4Context, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def refList_sempred(self, localctx:RefListContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def exprS_sempred(self, localctx:ExprSContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def exprS1_sempred(self, localctx:ExprS1Context, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def exprS2_sempred(self, localctx:ExprS2Context, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def exprS3_sempred(self, localctx:ExprS3Context, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def exprS4_sempred(self, localctx:ExprS4Context, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

    def exprM_sempred(self, localctx:ExprMContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def exprM1_sempred(self, localctx:ExprM1Context, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

    def exprM2_sempred(self, localctx:ExprM2Context, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

    def exprM3_sempred(self, localctx:ExprM3Context, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

    def exprM4_sempred(self, localctx:ExprM4Context, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

    def expr1_sempred(self, localctx:Expr1Context, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 2)
         

    def expr2_sempred(self, localctx:Expr2Context, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 2)
         

    def expr3_sempred(self, localctx:Expr3Context, predIndex:int):
            if predIndex == 19:
                return self.precpred(self._ctx, 2)
         

    def expr4_sempred(self, localctx:Expr4Context, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 2)
         




